import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
import time
import pandas as pd
import os

st.set_page_config(page_title="Chest X-ray Pneumonia Detection", layout="centered")

# --- ูุณุงุฑ ุงููููุฐุฌ ุฏุงุฎู ุงูุฑูุจู ---
MODEL_PATH = "pneu_d_models2.h5"  # ุถุน ุงูููู ูู ููุณ ูุฌูุฏ main.py

# --- ุชุญููู ุงููููุฐุฌ ูุน cache ---
@st.cache_resource
def load_pneu_model():
    if not os.path.exists(MODEL_PATH):
        st.error(f"โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฐุฌ: {MODEL_PATH}")
        return None
    model = load_model(MODEL_PATH)
    return model

model = load_pneu_model()

if model is None:
    st.stop()  # ุฅุฐุง ุงููููุฐุฌ ุบูุฑ ููุฌูุฏุ ุฃููู ุงูุชุทุจูู

# --- ุงุณุชุฎุฑุงุฌ ุดูู ุงูุฅุฏุฎุงู ูู ุงููููุฐุฌ ---
input_shape = model.input_shape[1:3]   # (height, width)
input_channels = model.input_shape[3]  # 1=grayscale, 3=rgb

# --- ูุงุฌูุฉ ุงูุชุทุจูู ---
st.title("๐ฉป Chest X-ray Pneumonia Detection")
st.write("ุงุฑูุน ุตูุฑุฉ ุฃุดุนุฉ ููุตุฏุฑ ูุณูุชู ุงูุชูุจุค ุฅุฐุง ูุงูุช **ุทุจูุนูุฉ** ุฃู **ุงูุชูุงุจ ุฑุฆูู**")

# --- ุฑูุน ุงูุตูุฑุฉ ---
uploaded_file = st.file_uploader("ุงุฑูุน ุตูุฑุฉ X-ray", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # --- ูุชุญ ุงูุตูุฑุฉ ุญุณุจ ุนุฏุฏ ุงููููุงุช ---
    if input_channels == 1:
        img = Image.open(uploaded_file).convert("L")
    else:
        img = Image.open(uploaded_file).convert("RGB")

    st.image(img, caption="๐ท ุงูุตูุฑุฉ ุงููุฑููุนุฉ", use_column_width=True)

    # --- ุชุฌููุฒ ุงูุตูุฑุฉ ููุชูุจุค ---
    img = img.resize(input_shape)
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # --- ุดุฑูุท ุชุญููู ููุชูุจุค ---
    progress_bar = st.progress(0)
    for i in range(1, 101):
        time.sleep(0.005)
        progress_bar.progress(i)

    # --- ุงูุชูุจุค ---
    prediction = model.predict(img_array)[0][0]

    pneumonia_prob = float(prediction * 100)
    normal_prob = float((1 - prediction) * 100)

    # --- ุนุฑุถ ุงููุชุงุฆุฌ ---
    st.subheader("๐ ุงููุชูุฌุฉ:")
    if prediction > 0.5:
        st.error(f"๐ ุงูุญุงูุฉ: Pneumonia (ุงูุชูุงุจ ุฑุฆูู) \n\n ๐ด ุงุญุชูุงู ุงูุงูุชูุงุจ: {pneumonia_prob:.2f}%")
    else:
        st.success(f"๐ ุงูุญุงูุฉ: Normal (ุทุจูุนู) \n\n ๐ข ุงุญุชูุงู ุงูุทุจูุนู: {normal_prob:.2f}%")

    # --- ุฌุฏูู ุงูุงุญุชูุงูุงุช ---
    probs_df = pd.DataFrame({
        "ุงูุชุตููู": ["Normal (ุทุจูุนู)", "Pneumonia (ุงูุชูุงุจ ุฑุฆูู)"],
        "ุงูุงุญุชูุงู %": [normal_prob, pneumonia_prob]
    })
    st.table(probs_df)

# --- ููุงุญุธุงุช ูููุชุฑ ---
st.markdown(
    "<hr style='border:1px solid gray'>"
    "<p style='text-align:center; font-weight:bold;'> ุชู ุงูุชุทููุฑ ูู ูุจู ู. ูููุฑ ุงูุจุญูุฑู ุ  ู.ุงููุนุชุตู ุจุงููู ุงูุฒูู ุ   ู.ุงุญูุฏ ุงูุนุจุณู </p>",
    unsafe_allow_html=True
)
